// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Environments.
    /// </summary>
    public static partial class EnvironmentsExtensions
    {
            /// <summary>
            /// Gets Environments.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueIEnumerableEnvironmentDto Get(this IEnvironments operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Environments.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableEnvironmentDto> GetAsync(this IEnvironments operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post new environment
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='environmentDto'>
            /// The entity to post
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static EnvironmentDto Post(this IEnvironments operations, EnvironmentDto environmentDto, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.PostAsync(environmentDto, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post new environment
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='environmentDto'>
            /// The entity to post
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnvironmentDto> PostAsync(this IEnvironments operations, EnvironmentDto environmentDto, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(environmentDto, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static EnvironmentDto GetById(this IEnvironments operations, long id, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetByIdAsync(id, expand, select, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnvironmentDto> GetByIdAsync(this IEnvironments operations, long id, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, expand, select, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='environmentDto'>
            /// The entity to put
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void PutById(this IEnvironments operations, long id, EnvironmentDto environmentDto, long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.PutByIdAsync(id, environmentDto, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='environmentDto'>
            /// The entity to put
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutByIdAsync(this IEnvironments operations, long id, EnvironmentDto environmentDto, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutByIdWithHttpMessagesAsync(id, environmentDto, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void DeleteById(this IEnvironments operations, long id, string ifMatch = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.DeleteByIdAsync(id, ifMatch, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IEnvironments operations, long id, string ifMatch = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(id, ifMatch, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a collection of all robots and, if no other sorting is provided,
            /// will place first those belonging to the environment. Allows odata query
            /// options.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View and Robots.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the environment for which the associated robots are placed first.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            public static ODataValueIEnumerableRobotDto GetRobotsForEnvironmentByKey(this IEnvironments operations, long key, long? xUIPATHOrganizationUnitId = default(long?), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetRobotsForEnvironmentByKeyAsync(key, xUIPATHOrganizationUnitId, expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all robots and, if no other sorting is provided,
            /// will place first those belonging to the environment. Allows odata query
            /// options.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View and Robots.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the environment for which the associated robots are placed first.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableRobotDto> GetRobotsForEnvironmentByKeyAsync(this IEnvironments operations, long key, long? xUIPATHOrganizationUnitId = default(long?), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRobotsForEnvironmentByKeyWithHttpMessagesAsync(key, xUIPATHOrganizationUnitId, expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of all the ids of the robots associated to an
            /// environment based on environment Id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View and Robots.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the environment for which the robot ids are fetched.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueIEnumerableInt64 GetRobotIdsForEnvironmentByKey(this IEnvironments operations, long key, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetRobotIdsForEnvironmentByKeyAsync(key, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all the ids of the robots associated to an
            /// environment based on environment Id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Read.
            ///
            /// Required permissions: Environments.View and Robots.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the environment for which the robot ids are fetched.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableInt64> GetRobotIdsForEnvironmentByKeyAsync(this IEnvironments operations, long key, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRobotIdsForEnvironmentByKeyWithHttpMessagesAsync(key, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associates a robot with the given environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='addRobotParameters'>
            /// RobotId - The associated robot Id.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void AddRobotById(this IEnvironments operations, long id, AddRobotParameters addRobotParameters = default(AddRobotParameters), long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.AddRobotByIdAsync(id, addRobotParameters, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a robot with the given environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='addRobotParameters'>
            /// RobotId - The associated robot Id.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddRobotByIdAsync(this IEnvironments operations, long id, AddRobotParameters addRobotParameters = default(AddRobotParameters), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.AddRobotByIdWithHttpMessagesAsync(id, addRobotParameters, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Dissociates a robot from the given environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='removeRobotParameters'>
            /// RobotId - The dissociated robot Id.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void RemoveRobotById(this IEnvironments operations, long id, RemoveRobotParameters removeRobotParameters = default(RemoveRobotParameters), long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.RemoveRobotByIdAsync(id, removeRobotParameters, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Dissociates a robot from the given environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='removeRobotParameters'>
            /// RobotId - The dissociated robot Id.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveRobotByIdAsync(this IEnvironments operations, long id, RemoveRobotParameters removeRobotParameters = default(RemoveRobotParameters), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.RemoveRobotByIdWithHttpMessagesAsync(id, removeRobotParameters, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Associates a group of robots with and dissociates another group of robots
            /// from the given environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='setRobotsParameters'>
            /// &lt;para /&gt;addedRobotIds - The id of the robots to be associated with
            /// the environment.
            /// &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from
            /// the environment.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void SetRobotsById(this IEnvironments operations, long id, SetRobotsParameters setRobotsParameters, long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.SetRobotsByIdAsync(id, setRobotsParameters, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a group of robots with and dissociates another group of robots
            /// from the given environment.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Robots or Robots.Write.
            ///
            /// Required permissions: Environments.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='setRobotsParameters'>
            /// &lt;para /&gt;addedRobotIds - The id of the robots to be associated with
            /// the environment.
            /// &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from
            /// the environment.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetRobotsByIdAsync(this IEnvironments operations, long id, SetRobotsParameters setRobotsParameters, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SetRobotsByIdWithHttpMessagesAsync(id, setRobotsParameters, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
