// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Processes.
    /// </summary>
    public static partial class ProcessesExtensions
    {
            /// <summary>
            /// Gets the processes.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='feedId'>
            /// </param>
            public static ODataValueIEnumerableProcessDto Get(this IProcesses operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string searchTerm = default(string), System.Guid? feedId = default(System.Guid?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count, searchTerm, feedId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the processes.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableProcessDto> GetAsync(this IProcesses operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string searchTerm = default(string), System.Guid? feedId = default(System.Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, searchTerm, feedId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a package.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Write.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            public static void DeleteById(this IProcesses operations, string id, System.Guid? feedId = default(System.Guid?), System.Guid? ifMatch = default(System.Guid?))
            {
                operations.DeleteByIdAsync(id, feedId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a package.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Write.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IProcesses operations, string id, System.Guid? feedId = default(System.Guid?), System.Guid? ifMatch = default(System.Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(id, feedId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a collection of all available versions of a given process. Allows
            /// odata query options.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processId'>
            /// The Id of the process for which the versions are fetched.
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            public static ODataValueIEnumerableProcessDto GetProcessVersionsByProcessid(this IProcesses operations, string processId, System.Guid? feedId = default(System.Guid?), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetProcessVersionsByProcessidAsync(processId, feedId, expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all available versions of a given process. Allows
            /// odata query options.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processId'>
            /// The Id of the process for which the versions are fetched.
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableProcessDto> GetProcessVersionsByProcessidAsync(this IProcesses operations, string processId, System.Guid? feedId = default(System.Guid?), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetProcessVersionsByProcessidWithHttpMessagesAsync(processId, feedId, expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Downloads the .nupkg file of a Package.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='feedId'>
            /// </param>
            public static Stream DownloadPackageByKey(this IProcesses operations, string key, System.Guid? feedId = default(System.Guid?))
            {
                return operations.DownloadPackageByKeyAsync(key, feedId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Downloads the .nupkg file of a Package.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> DownloadPackageByKeyAsync(this IProcesses operations, string key, System.Guid? feedId = default(System.Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.DownloadPackageByKeyWithHttpMessagesAsync(key, feedId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Uploads a new package or a new version of an existing package. The content
            /// of the package is sent as a .nupkg file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Write.
            ///
            /// Required permissions: (Packages.Create - Uploads packages in tenant-level
            /// feed.).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='file1'>
            /// </param>
            /// <param name='file2'>
            /// </param>
            /// <param name='file3'>
            /// </param>
            /// <param name='file4'>
            /// </param>
            /// <param name='file5'>
            /// </param>
            /// <param name='file6'>
            /// </param>
            /// <param name='file7'>
            /// </param>
            /// <param name='file8'>
            /// </param>
            /// <param name='file9'>
            /// </param>
            public static ODataValueIEnumerableBulkItemDtoString UploadPackage(this IProcesses operations, Stream file, System.Guid? feedId = default(System.Guid?), Stream file1 = default(Stream), Stream file2 = default(Stream), Stream file3 = default(Stream), Stream file4 = default(Stream), Stream file5 = default(Stream), Stream file6 = default(Stream), Stream file7 = default(Stream), Stream file8 = default(Stream), Stream file9 = default(Stream))
            {
                return operations.UploadPackageAsync(file, feedId, file1, file2, file3, file4, file5, file6, file7, file8, file9).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a new package or a new version of an existing package. The content
            /// of the package is sent as a .nupkg file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Write.
            ///
            /// Required permissions: (Packages.Create - Uploads packages in tenant-level
            /// feed.).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='feedId'>
            /// </param>
            /// <param name='file1'>
            /// </param>
            /// <param name='file2'>
            /// </param>
            /// <param name='file3'>
            /// </param>
            /// <param name='file4'>
            /// </param>
            /// <param name='file5'>
            /// </param>
            /// <param name='file6'>
            /// </param>
            /// <param name='file7'>
            /// </param>
            /// <param name='file8'>
            /// </param>
            /// <param name='file9'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableBulkItemDtoString> UploadPackageAsync(this IProcesses operations, Stream file, System.Guid? feedId = default(System.Guid?), Stream file1 = default(Stream), Stream file2 = default(Stream), Stream file3 = default(Stream), Stream file4 = default(Stream), Stream file5 = default(Stream), Stream file6 = default(Stream), Stream file7 = default(Stream), Stream file8 = default(Stream), Stream file9 = default(Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UploadPackageWithHttpMessagesAsync(file, feedId, file1, file2, file3, file4, file5, file6, file7, file8, file9, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process parameters
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Required permissions: Packages.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static ArgumentMetadata GetArgumentsByKey(this IProcesses operations, string key)
            {
                return operations.GetArgumentsByKeyAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get process parameters
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Read.
            ///
            /// Required permissions: Packages.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArgumentMetadata> GetArgumentsByKeyAsync(this IProcesses operations, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetArgumentsByKeyWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Saves process arguments
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Write.
            ///
            /// Required permissions: Packages.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setArgumentsParameters'>
            /// SetArguments action parameters
            /// </param>
            public static void SetArguments(this IProcesses operations, SetArgumentsParameters setArgumentsParameters = default(SetArgumentsParameters))
            {
                operations.SetArgumentsAsync(setArgumentsParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Saves process arguments
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Execution or Execution.Write.
            ///
            /// Required permissions: Packages.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setArgumentsParameters'>
            /// SetArguments action parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetArgumentsAsync(this IProcesses operations, SetArgumentsParameters setArgumentsParameters = default(SetArgumentsParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SetArgumentsWithHttpMessagesAsync(setArgumentsParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
