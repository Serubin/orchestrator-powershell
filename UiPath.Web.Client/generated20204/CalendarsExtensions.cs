// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Calendars.
    /// </summary>
    public static partial class CalendarsExtensions
    {
            /// <summary>
            /// Gets calendars for current tenant.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            public static ODataValueIEnumerableExtendedCalendarDto Get(this ICalendars operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets calendars for current tenant.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableExtendedCalendarDto> GetAsync(this ICalendars operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Create).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extendedCalendarDto'>
            /// The entity to post
            /// </param>
            public static ExtendedCalendarDto Post(this ICalendars operations, ExtendedCalendarDto extendedCalendarDto)
            {
                return operations.PostAsync(extendedCalendarDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Create).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extendedCalendarDto'>
            /// The entity to post
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtendedCalendarDto> PostAsync(this ICalendars operations, ExtendedCalendarDto extendedCalendarDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(extendedCalendarDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets calendar based on its id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            public static ExtendedCalendarDto GetById(this ICalendars operations, long id, string expand = default(string), string select = default(string))
            {
                return operations.GetByIdAsync(id, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets calendar based on its id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Read.
            ///
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtendedCalendarDto> GetByIdAsync(this ICalendars operations, long id, string expand = default(string), string select = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edits a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='extendedCalendarDto'>
            /// The entity to put
            /// </param>
            public static ExtendedCalendarDto PutById(this ICalendars operations, long id, ExtendedCalendarDto extendedCalendarDto)
            {
                return operations.PutByIdAsync(id, extendedCalendarDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='extendedCalendarDto'>
            /// The entity to put
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtendedCalendarDto> PutByIdAsync(this ICalendars operations, long id, ExtendedCalendarDto extendedCalendarDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(id, extendedCalendarDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Delete).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            public static void DeleteById(this ICalendars operations, long id, string ifMatch = default(string))
            {
                operations.DeleteByIdAsync(id, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a calendar.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Delete).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this ICalendars operations, long id, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Validate calendar name, and check if it already exists.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendarExistsParameters'>
            /// </param>
            public static ODataValueBoolean CalendarExists(this ICalendars operations, CalendarExistsParameters calendarExistsParameters = default(CalendarExistsParameters))
            {
                return operations.CalendarExistsAsync(calendarExistsParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate calendar name, and check if it already exists.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Settings or Settings.Write.
            ///
            /// Required permissions: (Settings.Edit).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendarExistsParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueBoolean> CalendarExistsAsync(this ICalendars operations, CalendarExistsParameters calendarExistsParameters = default(CalendarExistsParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CalendarExistsWithHttpMessagesAsync(calendarExistsParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
