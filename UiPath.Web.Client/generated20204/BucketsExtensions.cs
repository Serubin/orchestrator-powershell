// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Buckets.
    /// </summary>
    public static partial class BucketsExtensions
    {
            /// <summary>
            /// Gets Buckets.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueIEnumerableBucketDto Get(this IBuckets operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Buckets.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableBucketDto> GetAsync(this IBuckets operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an Bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bucketDto'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BucketDto Post(this IBuckets operations, BucketDto bucketDto, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.PostAsync(bucketDto, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an Bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bucketDto'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BucketDto> PostAsync(this IBuckets operations, BucketDto bucketDto, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(bucketDto, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single Bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BucketDto GetById(this IBuckets operations, long id, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetByIdAsync(id, expand, select, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single Bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BucketDto> GetByIdAsync(this IBuckets operations, long id, string expand = default(string), string select = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, expand, select, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='bucketDto'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BucketDto PutById(this IBuckets operations, long id, BucketDto bucketDto, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.PutByIdAsync(id, bucketDto, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a bucket.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='bucketDto'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BucketDto> PutByIdAsync(this IBuckets operations, long id, BucketDto bucketDto, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(id, bucketDto, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void DeleteById(this IBuckets operations, long id, string ifMatch = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.DeleteByIdAsync(id, ifMatch, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a bucket
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IBuckets operations, long id, string ifMatch = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(id, ifMatch, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a direct download URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL expiration time
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BlobFileAccessDto GetReadUriByKey(this IBuckets operations, long key, string path, int? expiryInMinutes = default(int?), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetReadUriByKeyAsync(key, path, expiryInMinutes, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a direct download URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL expiration time
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobFileAccessDto> GetReadUriByKeyAsync(this IBuckets operations, long key, string path, int? expiryInMinutes = default(int?), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetReadUriByKeyWithHttpMessagesAsync(key, path, expiryInMinutes, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a direct upload URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL Expiration time
            /// </param>
            /// <param name='contentType'>
            /// ContentType for S3 access policy
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BlobFileAccessDto GetWriteUriByKey(this IBuckets operations, long key, string path, int? expiryInMinutes = default(int?), string contentType = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetWriteUriByKeyAsync(key, path, expiryInMinutes, contentType, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a direct upload URL for BlobFile.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='expiryInMinutes'>
            /// URL Expiration time
            /// </param>
            /// <param name='contentType'>
            /// ContentType for S3 access policy
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobFileAccessDto> GetWriteUriByKeyAsync(this IBuckets operations, long key, string path, int? expiryInMinutes = default(int?), string contentType = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWriteUriByKeyWithHttpMessagesAsync(key, path, expiryInMinutes, contentType, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the files in a directory.
            /// Optionally returns all files in all child directories (recursive).
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='recursive'>
            /// Recurse subdirectories (flat view)
            /// </param>
            /// <param name='top'>
            /// Number of files to return
            /// </param>
            /// <param name='skip'>
            /// Number of files to skip
            /// </param>
            /// <param name='fileNameGlob'>
            /// Files listing filter
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueIEnumerableBlobFileDto GetFilesByKey(this IBuckets operations, long key, string directory, bool? recursive = default(bool?), int? top = default(int?), int? skip = default(int?), string fileNameGlob = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetFilesByKeyAsync(key, directory, recursive, top, skip, fileNameGlob, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the files in a directory.
            /// Optionally returns all files in all child directories (recursive).
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='recursive'>
            /// Recurse subdirectories (flat view)
            /// </param>
            /// <param name='top'>
            /// Number of files to return
            /// </param>
            /// <param name='skip'>
            /// Number of files to skip
            /// </param>
            /// <param name='fileNameGlob'>
            /// Files listing filter
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableBlobFileDto> GetFilesByKeyAsync(this IBuckets operations, long key, string directory, bool? recursive = default(bool?), int? top = default(int?), int? skip = default(int?), string fileNameGlob = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFilesByKeyWithHttpMessagesAsync(key, directory, recursive, top, skip, fileNameGlob, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the child directories in a directory.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='top'>
            /// Number of directories to return
            /// </param>
            /// <param name='skip'>
            /// Number of directories to skip
            /// </param>
            /// <param name='fileNameGlob'>
            /// Directory listing filter
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static ODataValueIEnumerableBlobFileDto GetDirectoriesByKey(this IBuckets operations, long key, string directory, int? top = default(int?), int? skip = default(int?), string fileNameGlob = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetDirectoriesByKeyAsync(key, directory, top, skip, fileNameGlob, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the child directories in a directory.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='directory'>
            /// The directory path
            /// </param>
            /// <param name='top'>
            /// Number of directories to return
            /// </param>
            /// <param name='skip'>
            /// Number of directories to skip
            /// </param>
            /// <param name='fileNameGlob'>
            /// Directory listing filter
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableBlobFileDto> GetDirectoriesByKeyAsync(this IBuckets operations, long key, string directory, int? top = default(int?), int? skip = default(int?), string fileNameGlob = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDirectoriesByKeyWithHttpMessagesAsync(key, directory, top, skip, fileNameGlob, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a file metadata.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static BlobFileDto GetFileByKey(this IBuckets operations, long key, string path, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetFileByKeyAsync(key, path, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a file metadata.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Read.
            ///
            /// Required permissions: Buckets.View and BlobFiles.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobFileDto> GetFileByKeyAsync(this IBuckets operations, long key, string path, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFileByKeyWithHttpMessagesAsync(key, path, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a file.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void DeleteFileByKey(this IBuckets operations, long key, string path, long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.DeleteFileByKeyAsync(key, path, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a file.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Administration or
            /// Administration.Write.
            ///
            /// Required permissions: Buckets.View and BlobFiles.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Bucket Id
            /// </param>
            /// <param name='path'>
            /// The BlobFile full path
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFileByKeyAsync(this IBuckets operations, long key, string path, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteFileByKeyWithHttpMessagesAsync(key, path, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
