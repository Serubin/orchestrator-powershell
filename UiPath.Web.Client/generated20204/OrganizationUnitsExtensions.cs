// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OrganizationUnits.
    /// </summary>
    public static partial class OrganizationUnitsExtensions
    {
            /// <summary>
            /// Gets the organization units.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View.
            ///
            /// DEPRECATED: Use /Folders/GetFolders instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static ODataValueIEnumerableOrganizationUnitDto Get(this IOrganizationUnits operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the organization units.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View.
            ///
            /// DEPRECATED: Use /Folders/GetFolders instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<ODataValueIEnumerableOrganizationUnitDto> GetAsync(this IOrganizationUnits operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Units.Create.
            ///
            /// DEPRECATED: Use /Folders/Post instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationUnitDto'>
            /// The entity to post
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static OrganizationUnitDto Post(this IOrganizationUnits operations, OrganizationUnitDto organizationUnitDto)
            {
                return operations.PostAsync(organizationUnitDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Units.Create.
            ///
            /// DEPRECATED: Use /Folders/Post instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationUnitDto'>
            /// The entity to post
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<OrganizationUnitDto> PostAsync(this IOrganizationUnits operations, OrganizationUnitDto organizationUnitDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(organizationUnitDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View.
            ///
            /// DEPRECATED: Use /Folders/Get instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static OrganizationUnitDto GetById(this IOrganizationUnits operations, long id, string expand = default(string), string select = default(string))
            {
                return operations.GetByIdAsync(id, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View.
            ///
            /// DEPRECATED: Use /Folders/Get instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<OrganizationUnitDto> GetByIdAsync(this IOrganizationUnits operations, long id, string expand = default(string), string select = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edits an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Units.Edit.
            ///
            /// DEPRECATED: Use /Folders/Put instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='organizationUnitDto'>
            /// The entity to put
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static OrganizationUnitDto PutById(this IOrganizationUnits operations, int id, OrganizationUnitDto organizationUnitDto)
            {
                return operations.PutByIdAsync(id, organizationUnitDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Units.Edit.
            ///
            /// DEPRECATED: Use /Folders/Put instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='organizationUnitDto'>
            /// The entity to put
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<OrganizationUnitDto> PutByIdAsync(this IOrganizationUnits operations, int id, OrganizationUnitDto organizationUnitDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(id, organizationUnitDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Units.Delete.
            ///
            /// DEPRECATED: Use /Folders/Delete instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static void DeleteById(this IOrganizationUnits operations, long id, string ifMatch = default(string))
            {
                operations.DeleteByIdAsync(id, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an organization unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Units.Delete.
            ///
            /// DEPRECATED: Use /Folders/Delete instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task DeleteByIdAsync(this IOrganizationUnits operations, long id, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a collection of all non robot users and, if no other sorting is
            /// provided, will place first those associated to an unit. Allows odata query
            /// options.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View and Users.View.
            ///
            /// DEPRECATED: Use /Folders/GetUsersForFolder instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the unit for which the associated users are placed first.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static ODataValueIEnumerableUserDto GetUsersForUnitByKey(this IOrganizationUnits operations, long key, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetUsersForUnitByKeyAsync(key, expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all non robot users and, if no other sorting is
            /// provided, will place first those associated to an unit. Allows odata query
            /// options.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View and Users.View.
            ///
            /// DEPRECATED: Use /Folders/GetUsersForFolder instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the unit for which the associated users are placed first.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<ODataValueIEnumerableUserDto> GetUsersForUnitByKeyAsync(this IOrganizationUnits operations, long key, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUsersForUnitByKeyWithHttpMessagesAsync(key, expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of all the ids of the users associated to an unit
            /// based on unit Id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View and Users.View.
            ///
            /// DEPRECATED: Kept for backwards compatibility.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the unit for which the robot ids are fetched.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static ODataValueIEnumerableInt64 GetUserIdsForUnitByKey(this IOrganizationUnits operations, long key)
            {
                return operations.GetUserIdsForUnitByKeyAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all the ids of the users associated to an unit
            /// based on unit Id.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Read.
            ///
            /// Required permissions: Units.View and Users.View.
            ///
            /// DEPRECATED: Kept for backwards compatibility.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The Id of the unit for which the robot ids are fetched.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<ODataValueIEnumerableInt64> GetUserIdsForUnitByKeyAsync(this IOrganizationUnits operations, long key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUserIdsForUnitByKeyWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associates a group of users with and dissociates another group of users
            /// from the given unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Users.Edit.
            ///
            /// DEPRECATED: Use /Folders/AssignUsers instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='setUsersParameters'>
            /// &lt;para /&gt;addedUserIds - The id of the users to be associated with the
            /// unit.
            /// &lt;para /&gt;removedUserIds - The id of the users to be dissociated from
            /// the unit.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static void SetUsersById(this IOrganizationUnits operations, int id, SetUsersParameters setUsersParameters)
            {
                operations.SetUsersByIdAsync(id, setUsersParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a group of users with and dissociates another group of users
            /// from the given unit.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: Folders or Folders.Write.
            ///
            /// Required permissions: Users.Edit.
            ///
            /// DEPRECATED: Use /Folders/AssignUsers instead.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='setUsersParameters'>
            /// &lt;para /&gt;addedUserIds - The id of the users to be associated with the
            /// unit.
            /// &lt;para /&gt;removedUserIds - The id of the users to be dissociated from
            /// the unit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task SetUsersByIdAsync(this IOrganizationUnits operations, int id, SetUsersParameters setUsersParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SetUsersByIdWithHttpMessagesAsync(id, setUsersParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
