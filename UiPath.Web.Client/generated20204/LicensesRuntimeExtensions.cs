// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LicensesRuntime.
    /// </summary>
    public static partial class LicensesRuntimeExtensions
    {
            /// <summary>
            /// Gets runtime licenses.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: License or License.Read.
            ///
            /// Required permissions: License.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='robotType'>
            /// Possible values include: 'NonProduction', 'Attended', 'Unattended',
            /// 'Studio', 'Development', 'StudioX', 'Headless', 'StudioPro',
            /// 'TestAutomation'
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            public static ODataValueIEnumerableLicenseRuntimeDto GetLicensesRuntimeByRobottype(this ILicensesRuntime operations, string robotType, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetLicensesRuntimeByRobottypeAsync(robotType, expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets runtime licenses.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: License or License.Read.
            ///
            /// Required permissions: License.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='robotType'>
            /// Possible values include: 'NonProduction', 'Attended', 'Unattended',
            /// 'Studio', 'Development', 'StudioX', 'Headless', 'StudioPro',
            /// 'TestAutomation'
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the odata-count header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataValueIEnumerableLicenseRuntimeDto> GetLicensesRuntimeByRobottypeAsync(this ILicensesRuntime operations, string robotType, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLicensesRuntimeByRobottypeWithHttpMessagesAsync(robotType, expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Toggles machine licensing on/off.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: License or License.Write.
            ///
            /// Required permissions: Machines.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='toggleMachineLicenseParameters'>
            /// </param>
            public static void ToggleEnabledByKey(this ILicensesRuntime operations, string key, ToggleMachineLicenseParameters toggleMachineLicenseParameters)
            {
                operations.ToggleEnabledByKeyAsync(key, toggleMachineLicenseParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Toggles machine licensing on/off.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: License or License.Write.
            ///
            /// Required permissions: Machines.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='toggleMachineLicenseParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ToggleEnabledByKeyAsync(this ILicensesRuntime operations, string key, ToggleMachineLicenseParameters toggleMachineLicenseParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.ToggleEnabledByKeyWithHttpMessagesAsync(key, toggleMachineLicenseParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
