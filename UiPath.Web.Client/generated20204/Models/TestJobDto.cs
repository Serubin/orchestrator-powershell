// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TestJobDto
    {
        /// <summary>
        /// Initializes a new instance of the TestJobDto class.
        /// </summary>
        public TestJobDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestJobDto class.
        /// </summary>
        /// <param name="state">Possible values include: 'Pending', 'Running',
        /// 'Stopping', 'Terminating', 'Faulted', 'Successful', 'Stopped',
        /// 'Suspended', 'Resumed'</param>
        public TestJobDto(string robotName = default(string), string machineName = default(string), string info = default(string), TestJobDtoState? state = default(TestJobDtoState?), long? id = default(long?))
        {
            RobotName = robotName;
            MachineName = machineName;
            Info = info;
            State = state;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RobotName")]
        public string RobotName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MachineName")]
        public string MachineName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Info")]
        public string Info { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Pending', 'Running',
        /// 'Stopping', 'Terminating', 'Faulted', 'Successful', 'Stopped',
        /// 'Suspended', 'Resumed'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public TestJobDtoState? State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

    }
}
