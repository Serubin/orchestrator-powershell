// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Processes operations.
    /// </summary>
    public partial interface IProcesses
    {
        /// <summary>
        /// Gets the processes.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Read.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='expand'>
        /// Expands related entities inline.
        /// </param>
        /// <param name='filter'>
        /// Filters the results, based on a Boolean condition.
        /// </param>
        /// <param name='select'>
        /// Selects which properties to include in the response.
        /// </param>
        /// <param name='orderby'>
        /// Sorts the results.
        /// </param>
        /// <param name='top'>
        /// Returns only the first n results.
        /// </param>
        /// <param name='skip'>
        /// Skips the first n results.
        /// </param>
        /// <param name='count'>
        /// Includes a count of the matching results in the response.
        /// </param>
        /// <param name='searchTerm'>
        /// </param>
        /// <param name='feedId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ODataValueIEnumerableProcessDto>> GetWithHttpMessagesAsync(string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string searchTerm = default(string), System.Guid? feedId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a package.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Write.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='id'>
        /// key: Id
        /// </param>
        /// <param name='feedId'>
        /// </param>
        /// <param name='ifMatch'>
        /// If-Match header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteByIdWithHttpMessagesAsync(string id, System.Guid? feedId = default(System.Guid?), System.Guid? ifMatch = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a collection of all available versions of a given process.
        /// Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Read.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='processId'>
        /// The Id of the process for which the versions are fetched.
        /// </param>
        /// <param name='feedId'>
        /// </param>
        /// <param name='expand'>
        /// Expands related entities inline.
        /// </param>
        /// <param name='filter'>
        /// Filters the results, based on a Boolean condition.
        /// </param>
        /// <param name='select'>
        /// Selects which properties to include in the response.
        /// </param>
        /// <param name='orderby'>
        /// Sorts the results.
        /// </param>
        /// <param name='top'>
        /// Returns only the first n results.
        /// </param>
        /// <param name='skip'>
        /// Skips the first n results.
        /// </param>
        /// <param name='count'>
        /// Includes a count of the matching results in the odata-count header.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ODataValueIEnumerableProcessDto>> GetProcessVersionsByProcessidWithHttpMessagesAsync(string processId, System.Guid? feedId = default(System.Guid?), string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Downloads the .nupkg file of a Package.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Read.
        ///
        /// Requires authentication.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='feedId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Stream>> DownloadPackageByKeyWithHttpMessagesAsync(string key, System.Guid? feedId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Uploads a new package or a new version of an existing package. The
        /// content of the package is sent as a .nupkg file embedded in the
        /// HTTP request.
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Write.
        ///
        /// Required permissions: (Packages.Create - Uploads packages in
        /// tenant-level feed.).
        /// </remarks>
        /// <param name='file'>
        /// </param>
        /// <param name='feedId'>
        /// </param>
        /// <param name='file1'>
        /// </param>
        /// <param name='file2'>
        /// </param>
        /// <param name='file3'>
        /// </param>
        /// <param name='file4'>
        /// </param>
        /// <param name='file5'>
        /// </param>
        /// <param name='file6'>
        /// </param>
        /// <param name='file7'>
        /// </param>
        /// <param name='file8'>
        /// </param>
        /// <param name='file9'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ODataValueIEnumerableBulkItemDtoString>> UploadPackageWithHttpMessagesAsync(Stream file, System.Guid? feedId = default(System.Guid?), Stream file1 = default(Stream), Stream file2 = default(Stream), Stream file3 = default(Stream), Stream file4 = default(Stream), Stream file5 = default(Stream), Stream file6 = default(Stream), Stream file7 = default(Stream), Stream file8 = default(Stream), Stream file9 = default(Stream), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get process parameters
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Read.
        ///
        /// Required permissions: Packages.View.
        /// </remarks>
        /// <param name='key'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ArgumentMetadata>> GetArgumentsByKeyWithHttpMessagesAsync(string key, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Saves process arguments
        /// </summary>
        /// <remarks>
        /// Client Credentials Flow required permissions: Execution or
        /// Execution.Write.
        ///
        /// Required permissions: Packages.Edit.
        /// </remarks>
        /// <param name='setArgumentsParameters'>
        /// SetArguments action parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> SetArgumentsWithHttpMessagesAsync(SetArgumentsParameters setArgumentsParameters = default(SetArgumentsParameters), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
