// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Token.
    /// </summary>
    public static partial class TokenExtensions
    {
            /// <summary>
            /// Gets Id Token - used for SSO with Kibana
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='responseType'>
            /// </param>
            /// <param name='redirectUri'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='loginHint'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='state'>
            /// </param>
            public static void Get(this IToken operations, string responseType = default(string), string redirectUri = default(string), string clientId = default(string), string loginHint = default(string), string nonce = default(string), string state = default(string))
            {
                operations.GetAsync(responseType, redirectUri, clientId, loginHint, nonce, state).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Id Token - used for SSO with Kibana
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='responseType'>
            /// </param>
            /// <param name='redirectUri'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='loginHint'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAsync(this IToken operations, string responseType = default(string), string redirectUri = default(string), string clientId = default(string), string loginHint = default(string), string nonce = default(string), string state = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.GetWithHttpMessagesAsync(responseType, redirectUri, clientId, loginHint, nonce, state, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets access token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='clientSecret'>
            /// </param>
            /// <param name='grantType'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static AccessToken Post(this IToken operations, string clientId = default(string), string clientSecret = default(string), string grantType = default(string), string scope = default(string))
            {
                return operations.PostAsync(clientId, clientSecret, grantType, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets access token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='clientSecret'>
            /// </param>
            /// <param name='grantType'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessToken> PostAsync(this IToken operations, string clientId = default(string), string clientSecret = default(string), string grantType = default(string), string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(clientId, clientSecret, grantType, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
