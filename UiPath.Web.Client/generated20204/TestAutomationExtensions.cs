// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20204
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TestAutomation.
    /// </summary>
    public static partial class TestAutomationExtensions
    {
            /// <summary>
            /// Start a test set execution.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Write.
            ///
            /// Required permissions: TestSetExecutions.Create.
            ///
            /// 200 OK returns test set execution Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSetId'>
            /// The Id of the test set
            /// </param>
            /// <param name='triggerType'>
            /// Specifies how was the execution triggered. Possible values include:
            /// 'Manual', 'Scheduled', 'ExternalTool'
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static long? StartTestSetExecution(this ITestAutomation operations, long testSetId, string triggerType = default(string), long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.StartTestSetExecutionAsync(testSetId, triggerType, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a test set execution.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Write.
            ///
            /// Required permissions: TestSetExecutions.Create.
            ///
            /// 200 OK returns test set execution Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSetId'>
            /// The Id of the test set
            /// </param>
            /// <param name='triggerType'>
            /// Specifies how was the execution triggered. Possible values include:
            /// 'Manual', 'Scheduled', 'ExternalTool'
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> StartTestSetExecutionAsync(this ITestAutomation operations, long testSetId, string triggerType = default(string), long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StartTestSetExecutionWithHttpMessagesAsync(testSetId, triggerType, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the specified test set execution.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Write.
            ///
            /// Required permissions: TestSetExecutions.Edit.
            ///
            /// 202 Accepted
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSetExecutionId'>
            /// Id for the test set execution to be canceled
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void CancelTestSetExecution(this ITestAutomation operations, long testSetExecutionId, long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.CancelTestSetExecutionAsync(testSetExecutionId, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified test set execution.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Write.
            ///
            /// Required permissions: TestSetExecutions.Edit.
            ///
            /// 202 Accepted
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSetExecutionId'>
            /// Id for the test set execution to be canceled
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelTestSetExecutionAsync(this ITestAutomation operations, long testSetExecutionId, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.CancelTestSetExecutionWithHttpMessagesAsync(testSetExecutionId, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels the specified test case execution.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Write.
            ///
            /// Required permissions: TestSetExecutions.Edit.
            ///
            /// 202 Accepted
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testCaseExecutionId'>
            /// Id for the test case execution to be canceled
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static void CancelTestCaseExecution(this ITestAutomation operations, long testCaseExecutionId, long? xUIPATHOrganizationUnitId = default(long?))
            {
                operations.CancelTestCaseExecutionAsync(testCaseExecutionId, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified test case execution.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Write.
            ///
            /// Required permissions: TestSetExecutions.Edit.
            ///
            /// 202 Accepted
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testCaseExecutionId'>
            /// Id for the test case execution to be canceled
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelTestCaseExecutionAsync(this ITestAutomation operations, long testCaseExecutionId, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.CancelTestCaseExecutionWithHttpMessagesAsync(testCaseExecutionId, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Read.
            ///
            /// Required permissions: TestSetExecutions.View.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testCaseAssertionId'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static Stream GetAssertionScreenshot(this ITestAutomation operations, long testCaseAssertionId, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.GetAssertionScreenshotAsync(testCaseAssertionId, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Client Credentials Flow required permissions: TestSetExecutions or
            /// TestSetExecutions.Read.
            ///
            /// Required permissions: TestSetExecutions.View.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testCaseAssertionId'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetAssertionScreenshotAsync(this ITestAutomation operations, long testCaseAssertionId, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.GetAssertionScreenshotWithHttpMessagesAsync(testCaseAssertionId, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// This will create a test set with source type API.This endpoint it is
            /// supposed to be used by API integration.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSets or TestSets.Write.
            ///
            /// Required permissions: TestSets.Create.
            ///
            /// 201 Created returns test set Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            public static long? CreateTestSetForReleaseVersion(this ITestAutomation operations, BuildTestSetRequestMessage message, long? xUIPATHOrganizationUnitId = default(long?))
            {
                return operations.CreateTestSetForReleaseVersionAsync(message, xUIPATHOrganizationUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This will create a test set with source type API.This endpoint it is
            /// supposed to be used by API integration.
            /// </summary>
            /// <remarks>
            /// Client Credentials Flow required permissions: TestSets or TestSets.Write.
            ///
            /// Required permissions: TestSets.Create.
            ///
            /// 201 Created returns test set Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='xUIPATHOrganizationUnitId'>
            /// Folder/OrganizationUnit Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> CreateTestSetForReleaseVersionAsync(this ITestAutomation operations, BuildTestSetRequestMessage message, long? xUIPATHOrganizationUnitId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateTestSetForReleaseVersionWithHttpMessagesAsync(message, xUIPATHOrganizationUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
